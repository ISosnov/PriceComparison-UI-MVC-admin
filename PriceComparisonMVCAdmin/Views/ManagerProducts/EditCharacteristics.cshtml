@model EditCharacteristicsViewModel
@{
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container my-4">
    <h2 class="mb-3">Редагування характеристик</h2>
    <div class="mb-3">
        <h5>
            @if (Model.ProductId.HasValue)
            {
                <a href="/ManagerProducts/EditBaseProduct/@Model.BaseProductId" class="me-2">@Model.BaseProductTitle</a>
                <span class="mx-2">→</span>
                <a href="/ManagerProducts/EditVariant/@Model.ProductId">@Model.ProductVariantTitle</a>
            }
            else
            {
                <a href="/ManagerProducts/EditBaseProduct/@Model.BaseProductId">@Model.BaseProductTitle</a>
            }
        </h5>
    </div>
    <div class="d-flex flex-column">
        <div class="row fw-bold border-bottom py-2">
            <div class="col-4 text-start">Характеристика</div>
            <div class="col-4 text-center">Значення</div>
            <div class="col-4 text-center">Дії</div>
        </div>

        @foreach (var characteristic in Model.Characteristics)
        {
            var meta = Model.CharacteristicsMeta.FirstOrDefault(m => m.CharacteristicId == characteristic.CharacteristicId);

            <div class="row align-items-center border-bottom py-2"
                 data-characteristic-id="@characteristic.CharacteristicId"
                 data-record-id="@characteristic.Id"
                 data-base-product-id="@characteristic.BaseProductId"
                 data-product-id="@characteristic.ProductId"
                 data-characteristic-type="@meta?.CharacteristicDataType?.ToLowerInvariant()">

                <div class="col-4 text-start">
                    <label class="form-label">@meta?.CharacteristicTitle</label>
                    @if (!string.IsNullOrEmpty(meta?.CharacteristicUnit))
                    {
                        <small>(@meta.CharacteristicUnit)</small>
                    }
                </div>

                <div class="col-4 text-center">
                    @if (meta?.CharacteristicDataType?.ToLowerInvariant() == "string")
                    {
                        <input class="form-control characteristic-input d-none text-center" type="text" value="@characteristic.ValueText" />
                        <span class="characteristic-display">@characteristic.ValueText</span>
                    }
                    else if (meta?.CharacteristicDataType?.ToLowerInvariant() == "decimal")
                    {
                        <input class="form-control characteristic-input d-none text-center" type="number" step="0.01" value="@characteristic.ValueNumber" />
                        <span class="characteristic-display">@characteristic.ValueNumber</span>
                    }
                    else if (meta?.CharacteristicDataType?.ToLowerInvariant() == "bool")
                    {
                        <input class="form-check-input characteristic-input d-none" type="checkbox" @(characteristic.ValueBoolean ? "checked" : "") />
                        <span class="characteristic-display">@(characteristic.ValueBoolean ? "Так" : "Ні")</span>
                    }
                    else if (meta?.CharacteristicDataType?.ToLowerInvariant() == "datetime")
                    {
                        <input class="form-control characteristic-input d-none text-center" type="date" value="@characteristic.ValueDate?.ToString("yyyy-MM-dd")" />
                        <span class="characteristic-display">@characteristic.ValueDate?.ToString("dd.MM.yyyy")</span>
                    }
                </div>

                <div class="col-4 text-center">
                    <button type="button" class="btn btn-sm btn-link edit-toggle-btn ms-2">
                        <i class="bi bi-pencil"></i>
                    </button>

                    <button type="button" class="btn btn-sm btn-link confirm-btn text-success d-none ms-2">
                        <i class="bi bi-check-lg"></i>
                    </button>

                    <button type="button" class="btn btn-sm btn-link cancel-btn text-danger d-none ms-2">
                        <i class="bi bi-x-lg"></i>
                    </button>

                    <button type="button" class="btn btn-sm btn-link delete-btn ms-2 text-danger">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
        <script>
            document.addEventListener("DOMContentLoaded", () => {
                // Редагування характеристики
                document.querySelectorAll(".edit-toggle-btn").forEach(button => {
                    button.addEventListener("click", () => {
                        const row = button.closest(".row");
                        row.querySelector(".characteristic-input").classList.remove("d-none");
                        row.querySelector(".characteristic-display").classList.add("d-none");
                        button.classList.add("d-none");
                        row.querySelector(".confirm-btn").classList.remove("d-none");
                        row.querySelector(".cancel-btn").classList.remove("d-none");
                    });
                });

                // Скасування редагування
                document.querySelectorAll(".cancel-btn").forEach(button => {
                    button.addEventListener("click", () => {
                        const row = button.closest(".row");
                        row.querySelector(".characteristic-input").classList.add("d-none");
                        row.querySelector(".characteristic-display").classList.remove("d-none");
                        row.querySelector(".confirm-btn").classList.add("d-none");
                        row.querySelector(".cancel-btn").classList.add("d-none");
                        row.querySelector(".edit-toggle-btn").classList.remove("d-none");
                    });
                });

                // Підтвердження редагування
                document.querySelectorAll(".confirm-btn").forEach(button => {
                    button.addEventListener("click", async () => {
                        const row = button.closest(".row");
                        const characteristicId = row.dataset.characteristicId;
                        const baseProductId = row.dataset.baseProductId || null;
                        const productId = row.dataset.productId || null;
                        const type = row.dataset.characteristicType;
                        const recordId = parseInt(row.dataset.recordId || "0");

                        const input = row.querySelector(".characteristic-input");
                        let newValue = input.value;

                        if (input.type === "checkbox") {
                            newValue = input.checked;
                        } else if (input.type === "number") {
                            newValue = parseFloat(newValue) || null;
                        } else if (input.type === "date") {
                            newValue = newValue ? new Date(newValue).toISOString() : null;
                        }

                        const payload = {
                            Id: recordId > 0 ? recordId : null,
                            BaseProductId: baseProductId,
                            ProductId: productId,
                            CharacteristicId: characteristicId,
                            ValueText: type === "string" ? newValue : null,
                            ValueNumber: type === "decimal" ? newValue : null,
                            ValueBoolean: type === "bool" ? newValue === true || newValue === "true" : false,
                            ValueDate: type === "datetime" ? newValue : null
                        };

                        const url = recordId > 0 ? "/ManagerProducts/UpdateCharacteristic" : "/ManagerProducts/CreateCharacteristic";
                        const method = recordId > 0 ? "PUT" : "POST";

                        try {
                            const res = await fetch(url, {
                                method,
                                headers: { "Content-Type": "application/json" },
                                body: JSON.stringify(payload)
                            });

                            if (!res.ok) throw new Error("Request failed");

                            const response = await res.json();

                            let display = newValue;
                            if (type === "bool") {
                                display = newValue ? "Так" : "Ні";
                            } else if (type === "datetime") {
                                display = newValue ? new Date(newValue).toLocaleDateString("uk-UA") : "Немає";
                            }

                            row.querySelector(".characteristic-display").textContent = display || "Немає";
                            row.querySelector(".characteristic-input").classList.add("d-none");
                            row.querySelector(".characteristic-display").classList.remove("d-none");
                            row.querySelector(".confirm-btn").classList.add("d-none");
                            row.querySelector(".cancel-btn").classList.add("d-none");
                            row.querySelector(".edit-toggle-btn").classList.remove("d-none");

                            if (recordId === 0 && response.updatedId) {
                                row.dataset.recordId = response.updatedId;
                            }
                        } catch {
                            alert("Помилка оновлення/створення");
                        }
                    });
                });

                // Видалення характеристики
                document.querySelectorAll(".delete-btn").forEach(button => {
                    button.addEventListener("click", async () => {
                        const row = button.closest(".row");
                        const recordId = row.dataset.recordId;

                        if (!recordId || recordId === "0") {
                            alert("Характеристика ще не була збережена.");
                            return;
                        }

                        try {
                            const res = await fetch(`/ManagerProducts/DeleteCharacteristic/${recordId}`, {
                                method: "DELETE"
                            });

                            if (!res.ok) throw new Error();

                            const input = row.querySelector(".characteristic-input");
                            if (input.type === "checkbox") input.checked = false;
                            else input.value = "";

                            row.querySelector(".characteristic-display").textContent = "Немає";
                            row.dataset.recordId = "0";
                            row.querySelector(".confirm-btn").classList.add("d-none");
                            row.querySelector(".cancel-btn").classList.add("d-none");
                            row.querySelector(".edit-toggle-btn").classList.remove("d-none");

                            alert("Значення характеристики видалено");
                        } catch {
                            alert("Помилка видалення");
                        }
                    });
                });
            });
        </script>
}


