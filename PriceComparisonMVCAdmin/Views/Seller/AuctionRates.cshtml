@model SellerAuctionRatesGroupedViewModel
@{
    Layout = "~/Views/Shared/_SellerLayout.cshtml";
    ViewData["Title"] = "Аукціонна ставка";
}
<div class="container my-3 list-group">
    <h5 class="mb-3">Аукціонні ставки за категоріями</h5>

    @foreach (var group in Model.GroupedCategories)
    {
        <div class="list-group-item">
            <button class="btn btn-link category-toggle d-flex align-items-center"
                    data-target="children-@group.Key.Id">
                <i class="bi bi-chevron-right toggle-icon me-2"></i>
                @group.Key.Title
            </button>

            <div id="children-@group.Key.Id" class="d-none ms-3 list-group">
                @foreach (var item in group.Value)
                {
                    <div class="list-group-item d-flex align-items-center justify-content-between"
                         data-category-id="@item.CategoryId"
                         data-rate-id="@item.AuctionClickRateId">

                        <span class="fw-bold me-2">@item.CategoryTitle</span>

                        <div class="d-flex align-items-center">
                            <span class="rate-display me-2">
                                @string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:F2}", item.AuctionClickRate)
                            </span>

                            <input type="number"
                                   class="form-control rate-input d-none"
                                   style="max-width: 80px;"
                                   step="0.01"
                                   value="@string.Format(System.Globalization.CultureInfo.InvariantCulture, "{0:F2}", item.AuctionClickRate)" />

                            <button type="button" class="btn btn-sm btn-link edit-toggle-btn ms-2">
                                <i class="bi bi-pencil"></i>
                            </button>

                            <button type="button" class="btn btn-sm btn-link text-success confirm-btn d-none ms-2">
                                <i class="bi bi-check-lg"></i>
                            </button>

                            <button type="button" class="btn btn-sm btn-link text-danger cancel-btn d-none ms-2">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {

            // togl categories
            document.querySelectorAll(".category-toggle").forEach(btn => {
                btn.addEventListener("click", () => {
                    const targetId = btn.getAttribute("data-target");
                    const target = document.getElementById(targetId);
                    const icon = btn.querySelector(".toggle-icon");

                    if (target.classList.contains("d-none")) {
                        target.classList.remove("d-none");
                        icon.classList.remove("bi-chevron-right");
                        icon.classList.add("bi-chevron-down");
                    } else {
                        target.classList.add("d-none");
                        icon.classList.remove("bi-chevron-down");
                        icon.classList.add("bi-chevron-right");
                    }
                });
            });

            // edit rate
            document.querySelectorAll(".edit-toggle-btn").forEach(btn => {
                btn.addEventListener("click", () => {
                    const container = btn.closest(".d-flex");

                    container.querySelector(".rate-display").classList.add("d-none");
                    container.querySelector(".rate-input").classList.remove("d-none");
                    btn.classList.add("d-none");
                    container.querySelector(".confirm-btn").classList.remove("d-none");
                    container.querySelector(".cancel-btn").classList.remove("d-none");
                });
            });

            // cancel edit
            document.querySelectorAll(".cancel-btn").forEach(btn => {
                btn.addEventListener("click", () => {
                    const container = btn.closest(".d-flex");
                    const rateDisplay = container.querySelector(".rate-display");
                    const rateInput = container.querySelector(".rate-input");

                    rateInput.value = rateDisplay.textContent.trim();
                    rateInput.classList.add("d-none");
                    rateDisplay.classList.remove("d-none");

                    container.querySelector(".confirm-btn").classList.add("d-none");
                    container.querySelector(".cancel-btn").classList.add("d-none");
                    container.querySelector(".edit-toggle-btn").classList.remove("d-none");
                });
            });

            // aprove edit
            document.querySelectorAll(".confirm-btn").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const container = btn.closest(".d-flex");
                    const row = btn.closest("[data-category-id]");
                    const categoryId = row.getAttribute("data-category-id");
                    const rateId = row.getAttribute("data-rate-id");
                    const rateInput = container.querySelector(".rate-input");
                    const newRate = parseFloat(rateInput.value);

                    const payload = {
                        CategoryId: parseInt(categoryId),
                        SellerId: @Model.SellerId,
                        ClickRate: newRate
                    };

                    if (rateId) {
                        payload.Id = parseInt(rateId);
                    }

                    try {
                        const response = await fetch(
                            `/Seller/AuctionRate/${rateId ? 'update' : 'create'}`,
                            {
                                method: rateId ? 'PUT' : 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify(payload)
                            }
                        );

                        if (!response.ok) throw new Error("Помилка запиту");

                        const result = await response.json();

                        if (!rateId && result.newId) {
                            row.setAttribute("data-rate-id", result.newId);
                        }

                        container.querySelector(".rate-display").textContent = newRate.toFixed(2);
                        rateInput.classList.add("d-none");
                        container.querySelector(".rate-display").classList.remove("d-none");

                        container.querySelector(".confirm-btn").classList.add("d-none");
                        container.querySelector(".cancel-btn").classList.add("d-none");
                        container.querySelector(".edit-toggle-btn").classList.remove("d-none");

                    } catch (error) {
                        alert("Сталася помилка при збереженні ставки.");
                    }
                });
            });

        });
    </script>
}